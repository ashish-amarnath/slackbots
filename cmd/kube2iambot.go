package cmd

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os/exec"
	"strings"

	"github.com/ashish-amarnath/slackbots/pkg/types"
	"github.com/golang/glog"
)

func getAccNumFromRoleArn(arnName string) (accNum string, err error) {
	err = nil
	accNum = ""
	roleArnParts := strings.Split(arnName, ":")
	if len(roleArnParts) != 6 {
		err = fmt.Errorf("%s doesn't ressemble an AWS IAM role arn", arnName)
		accNum = ""
	} else {
		accNum = roleArnParts[types.AccountNumberIndexInRoleArn]
		err = nil
	}
	return
}

func getAccountOwnerIDEndpoint(metadataServerURL, accNum string) string {
	return fmt.Sprintf("%s/%s=%s", metadataServerURL, types.AWSMetaDataServerAccRsrcEp, accNum)
}

func parseAccOwnerResponse(raw []byte) (respObj types.AccNumRespMsg, err error) {
	err = json.Unmarshal(raw, &respObj)
	return
}

func doHTTPRequest(url, apiKey string) (raw []byte, err error) {
	raw = nil
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		err := fmt.Errorf("failed to create request to url=%s err=%s", url, err)
		glog.Error(err)
		return nil, err
	}
	req.Header.Set("X-Api-Key", apiKey)

	resp, err := http.DefaultClient.Do(req)
	if err != nil || resp.StatusCode != 200 {
		err := fmt.Errorf("request to url=%s failed err=%s, httpStatusCode=%d(%s)", url, err, resp.StatusCode, resp.Status)
		glog.Error(err)
		return nil, err
	}

	raw, err = ioutil.ReadAll(resp.Body)
	resp.Body.Close()
	return raw, nil
}

func getAWSAccountOwnerID(baseURL, apiKey, awsAccNum string) (ownerID string, err error) {
	url := getAccountOwnerIDEndpoint(baseURL, awsAccNum)
	ownerID = ""
	err = nil

	rBody, err := doHTTPRequest(url, apiKey)
	respJSON, err := parseAccOwnerResponse(rBody)
	if err != nil {
		err = fmt.Errorf("doHttpRequest to getAWSAccountOwnerID url=%s failed, err=%s", url, err)
		glog.Error(err)
		ownerID = ""
	} else {
		err = nil
		ownerID = fmt.Sprintf("%d", respJSON.Data[0].OwnerTeamID)
	}
	return
}

func parseAdSecGrpResponse(raw []byte) (respObj types.AdSecurityGroupResp, err error) {
	err = json.Unmarshal(raw, &respObj)
	return
}

func getOwnerADSecurityGroup(baseURL, apiKey, ownerTeadID string) string {
	url := fmt.Sprintf("%s/%s=%s", baseURL, types.ADSecurityGroupEndPoint, ownerTeadID)

	rBody, err := doHTTPRequest(url, apiKey)
	if err != nil {
		err := fmt.Errorf("doHttpRequest to url=%s failed, err=%s", url, err)
		glog.Error(err)
		return err.Error()
	}
	respJSON, err := parseAdSecGrpResponse(rBody)
	if err != nil {
		err := fmt.Errorf("failed to parse response from end point %s, err=%s", url, err)
		glog.Error(err)
		return err.Error()
	}

	return respJSON.Data[0].ADSecurityGroup
}

func parseADGroupMemberListResp(raw []byte) (respJSON types.ADGroupMemberListResp, err error) {
	err = json.Unmarshal(raw, &respJSON)
	return
}

func getAdGrpMembers(adGroupMemberlistURL, adSecGrp string) string {
	curlCmd := fmt.Sprintf("curl -s %s/%s", adGroupMemberlistURL, adSecGrp)
	glog.V(5).Infof("curlCmd: %s", curlCmd)
	cmd := exec.Command("bash", "-c", curlCmd)
	out, err := cmd.Output()
	if err != nil {
		glog.Errorf("failed to successfully run [%s] err=%s", curlCmd, err)
		return err.Error()
	}
	adGrpMemberListResp, err := parseADGroupMemberListResp(out)
	return strings.Join(adGrpMemberListResp.Members.Users, ", ")
}

// ProcessValidateKube2IamReq validates kube2iam request
func ProcessValidateKube2IamReq(adGrpListURL, mdsURL, mdsAPIKey, msg string) string {
	msgParts := strings.Split(msg, " ")
	usage := fmt.Sprintf("ERROR:\n Request should be of the form ```%s <namespace> <roleArn>``` Order is important. Received ```%s```", types.ValidateKube2IamBotReq, msg)
	var resp string

	if len(msgParts) != 3 {
		return usage
	}

	namespace := msgParts[1]
	awsRoleArn := msgParts[2]

	awsAccountNumber, err := getAccNumFromRoleArn(awsRoleArn)
	if err != nil {
		return fmt.Sprintf("err:%s\n %s\n", err.Error(), usage)
	}

	roleAccOwnerID, err := getAWSAccountOwnerID(mdsURL, mdsAPIKey, awsAccountNumber)
	if err != nil {
		return fmt.Sprintf("err:%s\n %s\n", err.Error(), usage)
	}
	adSecGrp := getOwnerADSecurityGroup(mdsURL, mdsAPIKey, roleAccOwnerID)
	nextStep := fmt.Sprintf("K8s admin copy paste \n ```%s %s %s``` \n OR \n ```%s %s %s```\n as appropriate",
		types.ApplysKube2IamBotReq, namespace, awsRoleArn, types.RejectKube2IamBotReq, namespace, awsRoleArn)
	resp = fmt.Sprintf("Owners of ARN [%s] are [%s]\n %s", awsRoleArn, getAdGrpMembers(adGrpListURL, adSecGrp), nextStep)
	return resp
}

// ApplyKube2IamReq applies kube2iam annotations to namespaces
func ApplyKube2IamReq(msgText, kubeconfig, cluster string) string {
	msgTxtArr := strings.Split(msgText, " ")
	namespace := msgTxtArr[1]
	awsRoleArn := msgTxtArr[2]

	resp := fmt.Sprintf("Allowing pods in namespace=%s to assume role=%s in cluster=%s, kubeconfig=%s", namespace, awsRoleArn, cluster, kubeconfig)
	glog.V(1).Infof(resp)

	return resp
}

// RejectKube2IamReq should get human intervention to process this request
func RejectKube2IamReq(msgText string) string {
	// TODO: notify requester about rejection
	return fmt.Sprintf("Go get a human to help out... NOW!!!")
}
